#!/usr/bin/env bash

# Change terminal title.
function title {
    printf "\e]0;$*\a"
}

function getHost {
    local item
    for item in ComputerName HostName LocalHostName; do
        echo -n "$item => "
        scutil --get $item
    done
    echo -n "NetBIOSName => "
    defaults read /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName
}

function setHost {
    sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName $1
    local item
    for item in ComputerName HostName LocalHostName; do
        scutil --set $item $1
    done
}

# Check assigned IPs and DNS records for all connected interfaces
function myIps {
    local ifce
    while read -r ifce; do
        echo -e "$(clr purple $ifce)"
        local ifceinfo=$(networksetup -getinfo "$ifce" | egrep -v "Client ID|IPv6|DHCP")
        local ifceip=$(echo $ifceinfo | egrep '^IP address' | cut -d ' ' -f 3)
        if [ -n "$ifceip" ]; then
            echo "$ifceinfo" | hl $ifceip
            local ifcedns=$(dig +short -x $ifceip)
            echo -e "DNS record: $(clr green $ifcedns)"
        else
            echo "$ifceinfo"
        fi
        echo
    done <<< "$(networksetup -listallnetworkservices | egrep -v '\*|LPSS|Bluetooth|Thunderbolt')"
}

function appify {
    open -n -a "Google Chrome" --args --app="$1"
}

# Find login item password in keychain by name (=label)
function get-keychain-pw {
   security find-generic-password -w -l "$1"
}

# find-in-files using find & grep
function fif {
    local FIND_OPTS GREP_OPTS
    while [ $# -gt 1 ]; do
        case "$1" in
            -i|-q|-l|-n|-h|-E)
                GREP_OPTS="$GREP_OPTS $1"
                shift
                ;;
            -name|-iname|-path|-ipath|-depth|-maxdepth)
                FIND_OPTS="$FIND_OPTS $1 $2"
                shift 2
                ;;
            -and|-not|-or)
                FIND_OPTS="$FIND_OPTS $1"
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    find . -not -path "*/.git/*" -type f $FIND_OPTS -exec fgrep -I $GREP_OPTS "$@" {} +
}

# Recursive find-in-file using fgrep -R
# Add -E option to use regex
function rgrep {
    fgrep -RI --exclude-dir=".git" "$@" .
}

# find-in-files using git. This is the fastest but lack options that find provides
# use -a option to search all files, including the one that are not tracked by git.
function ggrep {
    if [ "$1" = "-a" ] ; then
        local GG_OPTS="--untracked --no-exclude-standard"
        shift
    fi
    git --no-pager grep $GG_OPTS -FI "$@"
}

# Use grep to higlight occurences, but print whole input.
function hl {
    cat - | egrep "$@|$"
}


# Run a git command in all sub-folders that are git repositories
function git-foreach {
    local REPO_DOT_GIT REPO
    for REPO_DOT_GIT in $(find . -type d -name ".git" | sort)
    do
        REPO=$(dirname "$REPO_DOT_GIT")
        echo -e "$(clr purple $REPO)"
        git -C "$REPO" "$@"
        echo
    done
}

# Show diff between 2 diffs
function diff-diff {
    diff <(git show $1) <(git show $2)
}

# Diff 2 json documents and colorize output
function jdiff {
    json_diff -u $1 $2 | pygmentize -g
}

# lsof for a given IP port number
function lsop {
    case "$1" in
        ''|*[!0-9]*)
            echo "Usage: ${FUNCNAME[0]}" PORT_NUMBER ;;
        *)
            lsof -Pni:$1 ;;
    esac
}

# Wait until process is terminated
function wait4pid {
    # Try to use the `wait` bash builtin
    wait "$1" 2>/dev/null
    [ $? -ne 127 ] && return
    # Status code 127 means that `wait` failed. Probably because
    # we tried to wait for a non-child process. ->fallback to polling
    while ps -p "$1" >/dev/null 2>&1; do 
        sleep 0.333
    done
}

function notif {
    local NTITLE="Notification" 
    local NSOUND='sound name "Tink"'
    while [ $# -gt 0 ]; do
        case "$1" in
            -s|--silent)
                unset NSOUND
                shift
                ;;
            --ok)
                NSOUND='sound name "-"'
                shift
                ;;
            --ko)
                NSOUND='sound name "Basso"'
                shift
                ;;
            -f|--from-status)
                if [ $2 -eq 0 ]; then
                    NTITLE='Success'
                    NSOUND='sound name "-"'
                else
                    NTITLE='Failure'
                    NSOUND='sound name "Basso"'
                fi
                shift 2
                ;;
            -t|--title)
                NTITLE="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                break
                ;;
        esac
    done
    osascript -e 'display notification "'"$@"'" with title "'"$NTITLE"'"'"$NSOUND"
}

function term-colors {   
    for COLR in {30..37}; do 
      HI_COLR=$(($COLR+60))
      echo -en "$COLR=\033[7;${COLR}m    \033[0m|\033[${COLR}mRegular\033[0m|\033[1;${COLR}mBold\033[0m"
      echo -en "    "
      echo -e  "$HI_COLR=\033[7;${HI_COLR}m    \033[0m|\033[${HI_COLR}mRegular\033[0m|\033[1;${HI_COLR}mBold\033[0m"
    done
}

# Echo color escape sequence
function clr {
    local CLR_CODE="0"
    case $(echo "$1" | tr '[:upper:]' '[:lower:]') in
        alt0)
            CLR_CODE="0;97";;
        alt1)
            CLR_CODE="0;90";;
        red|off)
            CLR_CODE="0;91";;
        green|on|ok)
            CLR_CODE="0;92";;
        yellow)
            CLR_CODE="0;93";;
        blue)
            CLR_CODE="0;94";;
        magenta|purple|info)
            CLR_CODE="0;95";;
        cyan)
            CLR_CODE="0;96";;
        warn)
            CLR_CODE="5;91";;
    esac
    shift
    echo -ne "\x01\033[${CLR_CODE}m\x02$@\x01\033[0m\x02"
}

# Print ON/OFF status 
function on-off {
    local ON_OFF=$([ -n "$1" ] && echo "On" || echo "Off")    
    echo -ne "[$(clr $ON_OFF $ON_OFF)]"
}

function alt {
    local FLAG=0
    while read -r line
    do
        echo -e "$(clr alt$FLAG "$line")"
        FLAG=$((1-FLAG))
    done
}

# Rebuild project with fastest options
function rebuild {
    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        echo "Usage: ${FUNCNAME[0]} [-h] [-a] [-o]"
        echo "  -h : Print help"
        echo "  -a : Build all subprojects, not only server"
        echo "  -o : Online (negates the offline flag)"
        return 
    fi

    local plst="-pl .,core,server"
    local offline="-o"
    while [ $# -gt 0 ]; do
        case "$1" in
            -a)
                unset plst
                shift
                ;;
            -o)
                unset offline
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    mvn clean install -Pdev $offline $plst 
    notif --from-status $? "Project rebuilt"
}


# Rebuild project and run unit tests
function retest {
    if [ $# -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        echo "Usage: ${FUNCNAME[0]} [-h] [-s] [-d] <test>"
        echo "  -h : Print help"
        echo "  -s : Skip build+install phases"
        echo "  -o : Online (negates the offline flag)"
        echo "  -d : Run in debug mode"
        return
    fi

    local offline="-o"
    while [ $# -gt 0 ]; do
        case "$1" in
            -d)
                local dbg_args="-Dmaven.surefire.debug"
                shift
                ;;
            -s)
                local skip_build="skip"
                shift
                ;;
            -o)
                unset offline
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    [ -z "$skip_build" ] && rebuild $offline

    echo "Now testing: $1"
    docker-compose run --rm --service-ports server mvn test -pl server $offline $dbg_args -Dtest="$1"
    notif --from-status $? "Test done"
}

# Native VPN as a service
function vpn {
    case "$1" in
        start)
            scutil --nc start "$2" | head -n1
            ;;
        stop)
            scutil --nc stop "$2"
            ;;
        status)
            local vpn_connected=$(scutil --nc status "$2" | head -n1)
            echo $vpn_connected
            [ "$vpn_connected" == "Connected" ]
            ;;
        list|ls)
            scutil --nc list | grep -v "PPP --> LPSS"
            ;;
        *)
            echo "Usage: ${FUNCNAME[0]} list|start|stop|status CONNECTION_NAME"
            ;;
    esac
}


# Adding aliases capabilities to docker-compose
function dc {
    local DC_CMD=$1
    shift
    case "$DC_CMD" in
        ls|services)
            DC_CMD="config --services"
            ;;
        sh)
            DC_CMD="exec $1 bash"
            shift
            ;;
        runbash)
            DC_CMD="run --rm --service-ports $1 bash"
            shift
            ;;
        logs|tail)
            DC_CMD="logs"
            if [[ "$1" =~ ^-([0-9]*)f?$ ]]; then
                DC_CMD="$DC_CMD -f --tail=${BASH_REMATCH[1]:-1}"
                shift
            fi
            ;;
        down)
            if [[ $# -gt 0 ]]; then
                DC_CMD="rm -vfs"
            fi
            ;;
    esac
    docker-compose $DC_CMD "$@"
}

# Compact and readable docker ps output
function dps {
    local IMAGE='{{join (split (js .Image) "'${MOBI_REGISTRY}'") "@"}}'
    local PORTS='{{with join (split (printf "%s" .Ports) "0.0.0.0:") ""}}{{join (split . "/tcp") ""}}{{end}}'
    docker ps -a --format 'table {{.ID}}\t'"$IMAGE"'\t{{.RunningFor}}\t{{.Status}}\t'"$PORTS"'\t{{.Names}}' | alt
}

# Setup kubectl port-forwarding
# Default port is 5432 for postgres, but can be changed
function k-forward {
    local LOCAL_PORT=${2:-5432}
    local FORWARD_PORT=${3:-$LOCAL_PORT}
    local FW_PID=$(lsof -tPni4:$LOCAL_PORT -sTCP:LISTEN)
    if [ -n "$FW_PID" ]; then
        local FW_NODE=$(ps -e -o command= $FW_PID | cut -d ' ' -f 3)
    fi

    case "$1" in
        help|-h|--help)
            echo "Usage: ${FUNCNAME[0]} <POD-SELECTOR>|stop|restart|status [LOCAL_PORT [FORWARD_PORT]]"
            echo "Default forward port is 5432, for postgres"
            ;;
        stop)
            if [ -n "$FW_PID" ]; then
               kill $FW_PID
               wait4pid $FW_PID
            fi
            ${FUNCNAME[0]} status $LOCAL_PORT
            ;;
        re*)
            ${FUNCNAME[0]} stop $LOCAL_PORT
            if [ -n "$FW_NODE" ]; then
                ${FUNCNAME[0]} $FW_NODE $LOCAL_PORT $FORWARD_PORT
            fi
            ;;
        status|"")
            echo -e "Port forwarding $(clr red $FW_NODE):$LOCAL_PORT->$FORWARD_PORT is $(on-off $FW_PID)"
            ;;
        *)
            if [ -z "$FW_PID" ]; then
                k context
                local FW_NODE=$(k-select "$1")
                if [ -n "$FW_NODE" ]; then
                    kubectl port-forward $FW_NODE $LOCAL_PORT:$FORWARD_PORT > /dev/null &
                    sleep 1
                    ${FUNCNAME[0]} status $LOCAL_PORT
                fi
            else
                local FW_COMMAND=$(ps -e -o comm= $FW_PID)
                echo -e "Port $(clr red $LOCAL_PORT) already in use by $(clr red $FW_COMMAND):"
                ps -ewf $FW_PID
            fi
    esac
}


# Run kubectl 'exec' command in all selected pods 
function k-foreach {
    if [ $# -lt 2 ] || [[ "$1" =~ ^-h|^--help ]]; then
        echo "Usage: ${FUNCNAME[0]} [-ti] <POD-SELECTOR> COMMAND [ARGS...]"
        echo "<POD-SELECTOR> can be a full pod name or one of: $(k-get-all-selectors | sed 's/ /, /g')"
        echo "E.g. ${FUNCNAME[0]} server curl localhost/rest/ping"
        return 1
    fi

    local EXEC_FLAGS
    while [[ "$1" =~ ^-[ti]+$ ]]; do # Accept any combo of -t, -i, -ti and -it
        EXEC_FLAGS="$EXEC_FLAGS $1"
        shift
    done

    local POD_SELECTOR="$1"
    shift

    k context
    local PODS=$(k-select "$POD_SELECTOR")
    local NUM_PODS=$(echo $PODS | wc -w)
    [ $NUM_PODS -ge 1 ] || return 1

    local CONTAINER=$(k-get-default-container "$POD_SELECTOR")
    if [ -n "$CONTAINER" ]; then
        local CONTAINER_ARGS="-c $CONTAINER"
    fi

    echo -e "Running in $(clr green ${CONTAINER:-default}) for: $(clr green $(echo $PODS | sed 's/ /, /g'))" >&2
    local POD
    for POD in $PODS; do 
        [ $NUM_PODS -gt 1 ] && echo -e "$(clr purple $POD)"
        kubectl exec $EXEC_FLAGS $POD $CONTAINER_ARGS -- "$@"
    done
}

# Select pod(s) by name or short-name
function k-select {
    local SELECTOR=$(k-get-selector "$1") # defined in .devenv
    if [ -n "$SELECTOR" ]; then
        kubectl get pods -l run=$SELECTOR -o jsonpath="{.items[*].metadata.name}"
    else
        local PODS=$(kubectl get pods "$1" -o name)
        if [ $? -eq 0 ]; then
            echo $PODS | cut -d / -f 2
        else
            return 1
        fi
    fi
}

# Adding aliases capabilities to kubectl
function k {
    case "$1" in
        po|pod|pods|no|node|nodes)
            ${FUNCNAME[0]} context 
            if [ $# -gt 1 ] && [ "${2:0:1}" != "-" ]; then
                local RESOURCE="$1"
                local GREP_STR="$2"
                shift 2
                kubectl get "$RESOURCE" "$@" | grep "$GREP_STR"
            else 
                kubectl get "$@"
            fi
            ;;
        bash|sh)
            local POD=$(k-select "$2")
            [ -n "$POD" ] || return 1
            local DEF_CONTNR=$(k-get-default-container "$2")
            shift 2
            [ -n "$DEF_CONTNR" ] && DEF_CONTNR="-c $DEF_CONTNR"
            kubectl exec -ti $POD $DEF_CONTNR -- ${@:-bash}
            ;;
        context|ctx)
            local CTX=$(kubectl config current-context 2>/dev/null)
            local CLR="INFO"
            [ "$CTX" = "prod" ] && CLR="RED"
            echo -e "Current context: [$(clr $CLR $CTX)]" >&2
            ;;

        contexts|ctxs)
            kubectl config get-contexts
            ;;
        none|off)
            kubectl config unset current-context
            ;;
        fw)
            shift
            k-forward "$@"
            ;;
        foreach|fe|each)
            shift
            k-foreach "$@"
            ;;
        kill)
            shift
            kubectl delete --force --grace-period=10 "$@" 
            ;;
        *)
            if kubectl config get-contexts -o name | grep -q "^"$1"$" ; then
                kubectl config use-context "$1" >/dev/null
                if [ $# -gt 1 ] ; then
                    shift
                    ${FUNCNAME[0]} "$@"
                else
                    ${FUNCNAME[0]} context
                fi
            else
                kubectl "$@"
            fi
            ;;
    esac
}

# Kept for reference
function vix {
    local EDITOR_CMD="command -p vi"
    if [ "$EDITOR" != "vi" ] ; then
        local ALT_EDITOR=${EDITOR:-subl -w}
        local RESP TIMEOUT_ITER=3
        local RESP
        echo -n "Vi for real ? I'll run '$ALT_EDITOR' instead [Y/n] $TIMEOUT_ITER "
        until read -n 1 -r -t 1 RESP; do
            TIMEOUT_ITER=$(($TIMEOUT_ITER-1))
            echo -n "$TIMEOUT_ITER "
            if [ $TIMEOUT_ITER -le 0 ]; then RESP="Y"; break; fi
        done
        # A key, but not 'return' was pressed
        if [ "$RESP" != "" ]; then echo; fi
        # N or Escape
        if [ "$RESP" = "n" ] || [ "$RESP" = "N" ] || [ "$RESP" = $'\e' ] ; then
            echo fine...
        else
            echo "I knew it !"
            EDITOR_CMD=$ALT_EDITOR
        fi
    fi
    $EDITOR_CMD $@
}

# Interact with the docker for mac xhyve VM
function dockerd {
    local ATTACH_CMD='docker run -it --name dockerd --rm --privileged --pid=host debian nsenter -t 1 -m -u -n -i'

    function _dockerd_inner_wait {
        echo -n "Waiting for docker daemon.."
        until docker info -f '[OK]{{printf "\n"}}Docker server version {{.ServerVersion}} is up and running' 2>/dev/null
        do
            sleep 1
            echo -n .
        done
    }

    function _dockerd_inner_stop {
        local HALT_CMD='halt && echo -n "Shutdown in progress.." && while true; do echo -n . ;sleep 1 ;done'
        $ATTACH_CMD sh -c "$HALT_CMD"
        echo "[OK]"
    }

    case "$1" in
        "stop")
            _dockerd_inner_stop
            ;;
        "restart")
            _dockerd_inner_stop
            echo "xhyve VM restarting. "
            _dockerd_inner_wait
            ;;
        "wait")
            _dockerd_inner_wait
            if [ $? -ne 0 ]; then
                echo "An error occured !"
            fi
            ;;
        "tz")
            local TZ=${2:-Canada/Eastern}
            $ATTACH_CMD ash -c "rc-service ntpd status || (rc-update add ntpd && rc-service ntpd start && rc-service ntpd status)"
            $ATTACH_CMD ash -c "[ -f /usr/share/zoneinfo/$TZ ] || apk update && apk add tzdata"
            $ATTACH_CMD cp /usr/share/zoneinfo/$TZ /etc/localtime
            $ATTACH_CMD ash -c "echo $TZ > /etc/timezone"
            $ATTACH_CMD date
            ;;
        "tty")
            screen -S dockerd ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty
            ;;
        "help" | "-help" | "--help" | "-h" )
            echo "Usage: ${FUNCNAME[0]} [stop|wait|restart|tty|tz|<shell command>]"
            echo "With no argument: open a shell attached to the xyhve VM."
            echo "<shell command> : excute command inside the xhyve VM."
            echo "tty             : Attach to docker tty (use ctrl-a ctrl-d to detach)"
            echo "stop            : shutdown the xhyve VM. Docker should restart automatically."
            echo "wait            : wait for Docker daemon to be accessible."
            echo "restart         : same as stop + wait"
            echo "tz              : start ntpd and set timezone to Canada/Eastern"
            ;;
        "")
            $ATTACH_CMD ash
            ;;
        *)
            $ATTACH_CMD "$@"
            ;;
    esac
    unset -f _dockerd_inner_stop
    unset -f _dockerd_inner_wait
}

